# SILVER2
# n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장
# 큰 합을 구하려고 한다. 단, 수는 1개 이상 선택해야 한다.
# n < 100,000

N = int(input())
numbers = list(map(int, input().split()))

# dp[K]는 배열의 첫번째부터 K번째 숫자까지 헤아렸을 때, 나올 수 있는 최대합을 뜻한다.
# dp[0]의 경우 0번째부터 0번째 숫자까지 고려한 경우이므로, dp[0] = numbers[0]이다.

# ex) [10, -4, 3, 1, 5, 6, -35, 12, 21, -1]인 경우 for문을 생각해 보자.
# i = 1인 경우 : max(10 + (-4), (-4)) 이므로 dp[1] = 6이 된다.
# i = 2인 경우 : max(6 + 3, 3) 이므로 dp[2] = 9가 된다.
# i = 3인 경우 : max(9 + 1, 1) 이므로 dp[3] = 10이 된다.
# i = 4인 경우 : max(10 + 5, 5) 이므로 dp[4] = 15가 된다.
# i = 5인 경우 : max(15 + 6, 6) 이므로 dp[5] = 21이 된다.
# i = 6인 경우 : max(21 + (-35), -35) 이므로 dp[6] = -14가 된다.
# i = 7인 경우 : max((-14) + 12, 12) 이므로 dp[7] = 12가 된다.
# i = 8인 경우 : max(12 + 21, 21) 이므로 dp[8] = 33이 된다.
# i = 9인 경우 : max(33-1, -1) 이므로 dp[9] = 33이 된다.

dp = [-1] * N
dp[0] = numbers[0]

for i in range(1, N):
    dp[i] = max(dp[i-1] + numbers[i], numbers[i])



print(max(dp))
