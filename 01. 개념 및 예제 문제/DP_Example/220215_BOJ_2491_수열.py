# SILVER3
# 0에서부터 9까지 숫자로 이루어진 N개의 숫자가 나열된 수열이 있다.
# 그 수열 안에서 연속해서 커지거나(같은 것 포함), 혹은 연속해서 작아지는(같은 것 포함) 수열 중 가장 길이가 긴 것을
# 찾아내어 그 길이를 출력하는 프로그램을 작성하라.

N = int(input())
arr = list(map(int, input().split()))

# dp[k]의 정의 : 0부터 k까지 가장 긴 연속 증가 수열 혹은 연속 감소 수열의 길이를 뜻한다.
dp = [1] * N # dp[0] = 1이다.

# 연속해서 증가하는 수열 중 가장 긴 수열의 길이를 구하고
# 연속해서 감소하는 수열 중 가장 긴 수열의 길이를 구하여 두 개를 비교한다.

for num in range(1, N):
    # 1. 연속증가수열의 길이를 측정해 보자.

    # 만약 현재 num이 이전 수에 연속해서 증가하는 수 또는 감소하는 수라면,
    # dp[num] = dp[num-1] + 1이 된다.
    # 하지만 num이 연속해서 감소or증가하는 수가 아니라면 dp[num] = 1이 된다. (해당 인덱스가 다시 시작 기준이 된다..)

    # 현재 수가 이전 수에 비해 여전히 증가하고 있다면
    if arr[num] >= arr[num-1]:
        dp[num] = dp[num-1] + 1
    # 현재 수가 이전 수에 비해 증가하고 있지 않다면
    else:
        dp[num] = 1

# 이제 가장 긴 증가 수열의 길이를 측정하자.
result = max(dp)

dp = [1] * N
for num in range(1, N):
    # 2. 연속감소수열의 길이를 측정해 보자.

    # 만약 현재 수가 이전 수에 비해 여전히 감소하고 있다면 이전 dp + 1
    if arr[num] <= arr[num-1]:
        dp[num] = dp[num-1] + 1
    # 현재 수가 이전 수에 비해 감소하고 있지 않다면
    else:
        dp[num] = 1

if result < max(dp):
    result = max(dp)

print(result)





